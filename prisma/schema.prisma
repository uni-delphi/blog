// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  //url      = env("DATABASE_URL")
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Blog {
  id          String      @id @default(uuid())
  bloggers    User[]
  posts       Post[]
  categorias  Categoria[]
}

// Modelo para representar una encuesta
model Post {
  id            String        @id @default(uuid())
  titulo        String
  bajada        String?
  cuerpo        String?
  imagen        String?
  slug          String?       @unique
  createdBy     User          @relation(fields: [createdById], references: [id])
  createdById   String

  categoria     Categoria     @relation(fields: [categoriaId], references: [id])
  categoriaId   String        @default("57f8ff1f-5f9e-4fec-b5de-ab9d6aca32bc") // Default value for the category

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  isActive      Boolean       @default(true)
  hasEnded      Boolean       @default(false)
  endDate       DateTime

  Blog          Blog[]
}

model Categoria {
  id          String        @id @default(uuid())
  title       String
  description String
  slug        String?       @unique  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  Blog        Blog[]

  Post        Post[]
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  lastName           String?
  email              String               @unique
  country            String
  state              String
  education          String
  sector             String
  institution        String
  expertees          String
  years              String
  password           String
  createdat          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  role               RoleType             @default(USER)

  accounts           Account[]
  sessions           Session[]
  posts              Post[] // Relaci√≥n inversa para las encuestas creadas por el administrador
  passwordReserToken PasswordReserToken[]

  Blog Blog[]
}

model PasswordReserToken {
  id        String      @id @default(uuid())
  token     String      @unique
  createdAt DateTime    @default(now())
  resetAt   DateTime?
  user      User        @relation(fields: [userId], references: [id])
  userId    String
}

enum RoleType {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String      @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
